#include <iostream>
using namespace std;

// Function to swap two elements
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to heapify a subtree rooted at index `i` (1-based indexing)
void heapify(int arr[], int n, int i) {
    int largest = i;           // Initialize largest as root
    int left = 2 * i;          // Left child index
    int right = 2 * i + 1;     // Right child index

    // If left child is larger than root
    if (left <= n && arr[left] > arr[largest]) {
        largest = left;
    }

    // If right child is larger than the largest so far
    if (right <= n && arr[right] > arr[largest]) {
        largest = right;
    }

    // If the largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);

        // Recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// Function to perform heap sort
void heapSort(int arr[], int n) {
    // Build a max heap
    for (int i = n / 2; i >= 1; i--) {
        heapify(arr, n, i);
    }

    // Extract elements one by one from the heap
    for (int i = n; i > 1; i--) {
        // Move current root to end
        swap(arr[1], arr[i]);

        // Call heapify on the reduced heap
        heapify(arr, i - 1, 1);
    }
}

int main() {
    int arr[] = {-1, 70, 60, 55, 45, 50};  // 1-based indexing, arr[0] is unused
    int n = 5;  // Number of elements in the array (excluding -1 at index 0)

    cout << "Before Sorting: ";
    for (int i = 1; i <= n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Call heapSort
    heapSort(arr, n);

    cout << "After Sorting: ";
    for (int i = 1; i <= n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
