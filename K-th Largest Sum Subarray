#include<algorithm>
#include<queue>
int getKthLargest(vector<int> &arr, int k)
{
	// TC - O(n^2);
	// vector<int> sumStore;
	// int n = arr.size();
	// for(int i = 0; i < n; i++){
	// 	int sum = 0;
	// 	for(int j=i; j<n; j++){
	// 		sum += arr[j];
	// 		sumStore.push_back(sum);
	// 	}
	// }

	// sort(sumStore.begin(), sumStore.end());
	// return sumStore[sumStore.size() - k];

	//Using Min Heap
	priority_queue<int,vector<int>, greater<int>> minHeap;
	int n = arr.size();
	for(int i=0; i<n; i++){
		int sum = 0;
		for(int j = i; j<n; j++){
			sum += arr[j];
			if(minHeap.size() < k){
				minHeap.push(sum);
			}
			else{
				if(sum > minHeap.top())
				{
					minHeap.pop();
					minHeap.push(sum);
				}
			}
		}
	}
	return minHeap.top();
}
