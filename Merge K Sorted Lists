#include <vector>
#include <queue>
using namespace std;

class compare {
public:
    bool operator()(Node* a, Node* b) {
        return a->data > b->data; // Min-heap based on node data
    }
};

Node* mergeKLists(vector<Node*>& listArray) {
    // Min-heap to store nodes from k lists
    priority_queue<Node*, vector<Node*>, compare> minHeap;

    int k = listArray.size(); // Number of linked lists
    if (k == 0) {
        return NULL;
    }

    // Push the head nodes of all non-empty lists into the heap
    for (int i = 0; i < k; i++) {
        if (listArray[i] != NULL) {
            minHeap.push(listArray[i]);
        }
    }

    // Initialize head and tail of the result list
    Node* head = NULL;
    Node* tail = NULL;

    // Process the min-heap until it's empty
    while (!minHeap.empty()) {
        Node* tmp = minHeap.top(); // Get the smallest node
        minHeap.pop();

        // If there's a next node, push it into the heap
        if (tmp->next != NULL) {
            minHeap.push(tmp->next);
        }

        // Add the smallest node to the result list
        if (head == NULL) {
            head = tmp;
            tail = tmp;
        } else {
            tail->next = tmp;
            tail = tmp;
        }
    }

    return head; // Return the merged sorted list
}
